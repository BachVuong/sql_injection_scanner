import streamlit as st
from crawler.crawl_urls import find_links_with_params
from scanner.sqli_scanner import inject_payload, load_payloads

# ------------------ H√†m ph√¢n lo·∫°i m·ª©c ƒë·ªô nghi√™m tr·ªçng ------------------
def classify_severity(payload):
    payload = payload.lower()
    if "union" in payload:
        return "High"
    elif "or" in payload:
        return "Medium"
    elif "and" in payload:
        return "Low"
    return "Low"

# ------------------ C·∫•u h√¨nh giao di·ªán ------------------
st.set_page_config(page_title="SQL Injection Scanner", page_icon="üõ°Ô∏è")

st.title("üõ°Ô∏è SQL Injection Scanner")
st.markdown("Nh·∫≠p website b·∫°n mu·ªën qu√©t ƒë·ªÉ ph√°t hi·ªán l·ªó h·ªïng SQL Injection.")

target = st.text_input("Nh·∫≠p URL website", "http://testphp.vulnweb.com")
scan_btn = st.button("B·∫Øt ƒë·∫ßu qu√©t")

if scan_btn:
    if not target.startswith("http"):
        st.error("URL ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng http:// ho·∫∑c https://")
    else:
        st.info("üîç ƒêang thu th·∫≠p URL c√≥ tham s·ªë...")
        urls = find_links_with_params(target)
        st.success(f"T√¨m ƒë∆∞·ª£c {len(urls)} URL c√≥ tham s·ªë")

        payloads = load_payloads("payloads/sqli.txt")
        vulnerable = []

        with st.spinner("ƒêang inject payload..."):
            for url in urls:
                for payload in payloads:
                    result = inject_payload(url, payload)
                    if result:
                        severity = classify_severity(payload)
                        st.warning(f"Ph√°t hi·ªán SQLi [{severity}]: {result}")
                        vulnerable.append((result, severity))
                        break

        if vulnerable:
            st.success(f"Ph√°t hi·ªán {len(vulnerable)} URL d·ªÖ b·ªã t·∫•n c√¥ng SQLi!")

            st.markdown("### üìä M·ª©c ƒë·ªô nghi√™m tr·ªçng:")
            for level in ["High", "Medium", "Low"]:
                count = sum(1 for _, s in vulnerable if s == level)
                if count > 0:
                    st.markdown(f"- **{level}**: {count} l·ªó h·ªïng")

            st.markdown("### üß¨ Chi ti·∫øt:")
            for v, s in vulnerable:
                st.write(f"[{s}] {v}")
        else:
            st.info("Kh√¥ng ph√°t hi·ªán SQLi n√†o.")
