import streamlit as st
import os
from crawler.crawl_urls import find_links_with_params
from scanner.sqli_scanner import inject_payload, load_payloads
from datetime import datetime

# C·∫•u h√¨nh giao di·ªán
st.set_page_config(page_title="SQL Injection Scanner", page_icon="üõ°Ô∏è")

# Kh·ªüi t·∫°o session state
if "current_tab" not in st.session_state:
    st.session_state.current_tab = "Qu√©t SQLi"
if "selected_report" not in st.session_state:
    st.session_state.selected_report = None

# Sidebar chuy·ªÉn tab
st.sidebar.title("üîß Menu")
tab = st.sidebar.radio("Ch·ªçn ch·ª©c nƒÉng", ["Qu√©t SQLi", "Xem b√°o c√°o"])
st.session_state.current_tab = tab

REPORT_DIR = "reports"

# ------------------ Tab 1: Qu√©t SQLi ------------------
if st.session_state.current_tab == "Qu√©t SQLi":
    st.title("üõ°Ô∏è SQL Injection Scanner")
    st.markdown("Nh·∫≠p website b·∫°n mu·ªën qu√©t ƒë·ªÉ ph√°t hi·ªán l·ªó h·ªïng SQL Injection.")

    target = st.text_input("Nh·∫≠p URL website", "http://testphp.vulnweb.com")
    scan_btn = st.button("B·∫Øt ƒë·∫ßu qu√©t")

    if scan_btn:
        if not target.startswith("http"):
            st.error("URL ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng http:// ho·∫∑c https://")
        else:
            st.info("üîç ƒêang thu th·∫≠p URL c√≥ tham s·ªë...")
            urls = find_links_with_params(target)
            st.success(f"T√¨m ƒë∆∞·ª£c {len(urls)} URL c√≥ tham s·ªë")

            payloads = load_payloads("payloads/sqli.txt")
            vulnerable = []

            with st.spinner("ƒêang inject payload..."):
                for url in urls:
                    for payload in payloads:
                        result = inject_payload(url, payload)
                        if result:
                            st.warning(f"Ph√°t hi·ªán SQLi: {result}")
                            vulnerable.append(result)
                            break

            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            os.makedirs(REPORT_DIR, exist_ok=True)
            report_file = f"report_{timestamp}.txt"
            with open(os.path.join(REPORT_DIR, report_file), "w") as f:
                for v in vulnerable:
                    f.write(f"{v}\n")

            st.session_state.selected_report = report_file

            if vulnerable:
                st.success(f"Ph√°t hi·ªán {len(vulnerable)} URL d·ªÖ b·ªã t·∫•n c√¥ng SQLi!")
                st.code("\n".join(vulnerable))
            else:
                st.info("Kh√¥ng ph√°t hi·ªán SQLi n√†o.")

# ------------------ Tab 2: Xem b√°o c√°o ------------------
elif st.session_state.current_tab == "Xem b√°o c√°o":
    st.title("üìÑ Danh s√°ch b√°o c√°o ƒë√£ l∆∞u")

    report_files = os.listdir(REPORT_DIR) if os.path.exists(REPORT_DIR) else []
    report_files.sort(reverse=True)

    selected = st.selectbox("Ch·ªçn b√°o c√°o ƒë·ªÉ xem:", [""] + report_files)

    if selected:
        st.session_state.selected_report = selected

    if st.session_state.selected_report:
        filepath = os.path.join(REPORT_DIR, st.session_state.selected_report)
        st.subheader(f"N·ªôi dung: {st.session_state.selected_report}")
        with open(filepath, "r") as f:
            st.code(f.read(), language="text")
